<project name="msid" default="full-build">

    <property name="pdepend" value="${basedir}/vendor/bin/pdepend"/>
    <property name="phpcpd"  value="${basedir}/vendor/bin/phpcpd"/>
    <property name="phpcs"   value="${basedir}/vendor/bin/phpcs"/>
    <property name="phploc"  value="${basedir}/vendor/bin/phploc"/>
    <property name="phpmd"   value="${basedir}/vendor/bin/phpmd"/>
    <property name="phpcbf"   value="${basedir}/vendor/bin/phpcbf"/>
    <property name="php-testability" value="${basedir}/vendor/bin/testability"/>
    <property name="codecept" value="${basedir}/vendor/bin/codecept"/>
    <property name="yii" value="${basedir}/yii_test"/>
    <property name="behat" value="${basedir}/vendor/bin/behat"/>

    <!--    <target name="full-build" depends="prepare,static-analysis,test-unit,test-acceptance" description="Performs static analysis, runs the tests, and generates project documentation"/>-->
    <target name="full-build" depends="prepare,static-analysis" description="Performs static analysis, runs the tests, and generates project documentation"/>
    <target name="full-build-parallel" depends="prepare,static-analysis-parallel,test-full" description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>
    <target name="quick-build" depends="prepare,lint" description="Performs a lint check and runs the tests (without generating code coverage reports)"/>
    <target name="static-analysis" depends="lint,phpcbf,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci" description="Performs static analysis"/>
    <target name="test-unit" depends="migration,unit" description="running unit tests"/>
    <target name="test-acceptance" depends="migration,acceptance" description="running acceptance tests"/>
    <target name="test-full" depends="test-unit,test-acceptance" description="running unit and acceptance tests"/>

    <!--
     Adjust the threadCount attribute's value to the number of CPUs
    -->
    <target name="static-analysis-parallel" description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
                <antcall target="phpcbf"/>
            </sequential>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
            <antcall target="lint"/>
            <antcall target="phpcpd-ci"/>
        </parallel>
    </target>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${basedir}/tests/_output"/>
        <delete dir="${basedir}/tests/_log"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/tests/_output"/>
        <mkdir dir="${basedir}/tests/_log"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l"/>
            <fileset dir="${basedir}/tests">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/components">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/controllers">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/models">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/tests">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
        <property name="lint.done" value="true"/>
    </target>

    <target name="phploc" unless="phploc.done" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg path="${basedir}/components"/>
            <arg path="${basedir}/controllers"/>
            <arg path="${basedir}/models"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci" unless="phploc.done" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/components"/>
            <arg path="${basedir}/controllers"/>
            <arg path="${basedir}/models"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phploc.done" value="true"/>
    </target>

    <target name="pdepend" unless="pdepend.done" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <!--            <arg value="&#45;&#45;jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>-->
            <!--            <arg value="&#45;&#45;overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>-->
            <arg value="--suffix=php"/>
            <arg value="--ignore=build,tests,config,runtime,web,docs,vendor"/>
            <arg path="${basedir}"/>
        </exec>
        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd"
            unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/components,${basedir}/controllers,${basedir}/models"/>
            <arg value="text"/>
            <arg path="${basedir}/build/phpmd.xml"/>
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci" unless="phpmd.done" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/components,${basedir}/controllers,${basedir}/models"/>
            <arg value="xml"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcbf" description="To automatically fix (fixable) coding style violations">
        <exec executable="${phpcbf}" taskname="phpcbf">
            <!--            <arg value="&#45;&#45;standard=build/phpcs.xml"/>-->
            <arg path="${basedir}/components"/>
            <arg path="${basedir}/controllers"/>
            <arg path="${basedir}/models"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs" unless="phpcs.done" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/components"/>
            <arg path="${basedir}/controllers"/>
            <arg path="${basedir}/models"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>

    <target name="testability" unless="testability.done" description="Run the Testability Static Code analysis.">
        <exec executable="${php-testability}" taskname="testability">
            <arg value="${basedir}"/>
            <arg value=" -x "/>
            <arg value="${basedir}/vendor"/>
            <arg value="-o "/>
            <arg value="${basedir}/build/testability"/>
        </exec>
        <property name="testability.done" value="true"/>
    </target>

    <target name="phpcs-ci" unless="phpcs.done" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/components"/>
            <arg path="${basedir}/controllers"/>
            <arg path="${basedir}/models"/>
            <arg path="${basedir}/tests"/>
        </exec>
        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/components"/>
            <arg path="${basedir}/controllers"/>
            <arg path="${basedir}/models"/>
        </exec>
        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="migration" description="Run Migrations">
        <exec executable="${yii}" failonerror="true" taskname="migration-down">
            <arg value="mongodb-migrate/down"/>
            <arg value="--interactive=0"/>
        </exec>
        <exec executable="${yii}" failonerror="true" taskname="migration-up">
            <arg value="mongodb-migrate/up"/>
            <arg value="--interactive=0"/>
        </exec>
    </target>

    <target name="unit" description="Run unit tests with Codecept">
        <exec executable="${codecept}" failonerror="true" taskname="unit">
            <arg value="run"/>
            <arg value="unit"/>
            <arg value="--html"/>
            <arg value="--xml"/>
            <arg value="--coverage-xml"/>
            <arg value="--coverage-html"/>
            <arg value="--steps"/>
        </exec>
    </target>

    <target name="acceptance" description="Run API tests with Codecept">
        <exec executable="${codecept}" failonerror="true" taskname="acceptance">
            <arg value="run"/>
            <arg value="api"/>
            <arg value="--html"/>
            <arg value="--xml"/>
            <arg value="--coverage-xml"/>
            <arg value="--coverage-html"/>
        </exec>
    </target>

    <target name="behat" description="Run Behat Scenarios">
        <exec executable="${behat}" failonerror="true">
            <arg value="--config=${basedir}/build/behat.yml" />
            <arg value="--verbose" />
        </exec>
    </target>
</project>
